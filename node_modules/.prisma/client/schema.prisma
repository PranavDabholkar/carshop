// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customers Customer[]
  services  Service[]

  @@map("users")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicles Vehicle[]
  services Service[]

  @@map("customers")
}

model Vehicle {
  id           String   @id @default(cuid())
  make         String
  model        String
  year         Int
  vin          String   @unique
  licensePlate String?
  color        String?
  mileage      Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  services   Service[]

  @@map("vehicles")
}

model Service {
  id          String        @id @default(cuid())
  type        String
  description String?
  cost        Decimal       @db.Decimal(10, 2)
  status      ServiceStatus @default(SCHEDULED)
  scheduledAt DateTime
  completedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  vehicleId  String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("services")
}

enum UserRole {
  ADMIN
  USER
}

enum ServiceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
